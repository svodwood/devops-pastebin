{"componentChunkName":"component---src-templates-blog-post-js","path":"/ec2-autoscaling-groups-prometheus-metrics/","result":{"data":{"site":{"siteMetadata":{"title":"Yet Another DevOps Pastebin"}},"markdownRemark":{"id":"cfbe8729-5f29-5754-95f7-4837e543d14c","excerpt":"Introduction Quite a few workloads may still require deployment to virtual machines instead of container orchestration platforms, yet still, have to beâ€¦","html":"<h2>Introduction</h2>\n<p>Quite a few workloads may still require deployment to virtual machines instead of container orchestration platforms, yet still, have to be intelligently autoscaled. For example, a compound workload running on a stateless EC2 instance in an EC2 Autoscaling Group may emit various Prometheus-compatible metrics via Prometheus exporters. A simplified model for such a use case could be an Ubuntu instance running a node-exporter, exposing OS metrics, and a workload application delivering its own set of Prometheus-compatible metrics.</p>\n<p>This post will illustrate how to configure an EC2 Autoscaling Group to use these metrics within Target Tracking Scaling Policies with the help of the AWS CloudWatch Agent.</p>\n<p>Pulumi IaC will help us bring up our infrastructure on the AWS Cloud. Check out <a href=\"https://pulumi.com\">pulumi.com</a> if you still need to become familiar with it. You can deploy this demo stack using the Pulumi button below.</p>\n<h2>What We Are Going To Build</h2>\n<p>We will create a pair of identical EC2 instances running in an EC2 Autoscaling Group, each running a demo web workload and exposing node-exporter and web-server metrics. Next, AWS CloudWatch Agent will scrape the metrics and publish them to CloudWatch. Finally, a Target Tracking Scaling Policy will govern autoscaling decisions based on a customized metric specification.</p>\n<p>To start building, we are going to need to meet the prerequisites:</p>\n<ol>\n<li>An AWS account with a named AWS CLI profile configured.</li>\n<li>A working Pulumi environment.</li>\n</ol>\n<blockquote>\n<p>Work In Progress</p>\n</blockquote>","frontmatter":{"title":"AWS EC2 Auto Scaling, Target Tracking Policies and Prometheus Exporters","date":"November 10, 2022","description":"Making EC2 autoscaling decisions based on metrics emitted by various Prometheus exporters."}},"previous":{"fields":{"slug":"/lambda-promtail/"},"frontmatter":{"title":"AWS Application Load Balancer Access Logs, Lambda-promtail and Grafana Loki"}},"next":null},"pageContext":{"id":"cfbe8729-5f29-5754-95f7-4837e543d14c","previousPostId":"fd3baf9f-c4a4-5569-9e45-1004d89b9e4a","nextPostId":null}},"staticQueryHashes":["4135132960","805692932"]}